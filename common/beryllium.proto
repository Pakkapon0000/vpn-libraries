// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

// TODO: Update this to privacy.ppn when replacing brass.proto.
package privacy.net.common.proto;

import "google/protobuf/timestamp.proto";
import "privacy/net/common/proto/key_services.proto";
import "privacy/net/common/proto/public_metadata.proto";


option cc_api_version = 2;
option java_api_version = 2;
option java_multiple_files = true;
option java_package = "com.google.android.libraries.privacy.ppn.proto";
option use_java_stubby_library = true;


enum IkeV2AuthMethod {
  AUTH_METHOD_UNSPECIFIED = 0;
  AUTH_METHOD_SHARED_KEY_MESSAGE_INTEGRITY_CODE = 1;
  AUTH_METHOD_ECDSA_WITH_SHA256_ON_P256 = 2;
  AUTH_METHOD_ECDSA_WITH_SHA384_ON_P384 = 3;
  AUTH_METHOD_ECDSA_WITH_SHA512_ON_P521 = 4;
}

enum IkeV2ClientIdType {
  ID_TYPE_UNSPECIFIED = 0;
  ID_TYPE_FQDN = 1;
  ID_TYPE_DER_ASN1_DN = 2;
  ID_TYPE_KEY_ID = 3;
}

// Both V6 and V6 fields are ranges (e.g. ending in /<foo>.)
message IpRange {
  oneof ip {
    string ipv4_range = 1;
    string ipv6_range = 2;
  }
}

message PpnDataplaneRequest {
  enum DataplaneProtocol {
    UNSPECIFIED_DATAPLANE_PROTOCOL = 0;
    IPSEC = 1;
    BRIDGE = 2;
    IKE = 3;
  }

  enum CryptoSuite {
    UNSPECIFIED_CRYPTO_SUITE = 0;
    AES128_GCM = 1;
    AES256_GCM = 2;
  }
  // The public value to be used by the server for encryption of
  // client-bound packets.
  bytes client_public_value = 1;

  // 16 random bytes used as half of HKDF salt. Server provides other half.
  bytes client_nonce = 2;

  // Ed25519 public key used to authenticate the client during rekey.
  bytes rekey_verification_key = 3;

  // Signature of latest `client_public_key` (above), using the signing pair of
  // the last previously sent `rekey_verification_key`.
  //
  // This should only be set in rekey requests, and MUST be the default empty
  // bytes in the initial request.
  bytes rekey_signature = 4;

  // The client-side [SPI](https://tools.ietf.org/html/rfc4303#page-10) used for
  // downlink packets. Assigned by the client, and may change during rekey
  // depending on the platform.
  uint32 downlink_spi = 5;

  // The previous server-side
  // [SPI](https://tools.ietf.org/html/rfc4303#page-10). This is needed only in
  // rekey requests.
  uint32 previous_uplink_spi = 6;

  // This comes from DNS resolution of the dataplane server DNS address.
  // Used in initial and rekey requests.
  string control_plane_sock_addr = 7;

  // Dataplane protocol that should be used.
  DataplaneProtocol dataplane_protocol = 8;

  // Applicable only for BRIDGE dataplane_protocol in the previous field.
  CryptoSuite suite = 9;

  string region_code = 10;

  // The APN type bridge-proxy use to deside which APN to use for connecting.
  string apn_type = 11;

  // Whether to enable dynamic mtu features in on the backend dataplane.
  bool dynamic_mtu_enabled = 12;

  // Client hint for whether Oasis is the preferred dataplane provider.
  // Beryllium may still elect to use Marconi even if this is true.
  bool prefer_oasis = 13;

  // If true, only reserved (allocated but inactive) IP addresses will be used.
  // Oasis only flag used for internal testing of new IP turnups.
  // See oasis_vpn.IpPoolSelector.use_reserved.
  bool use_reserved_ip_pool = 14;

  // To specify the authentication method used in IKE_AUTH. The probable auth
  // methods are listed in
  // https://www.iana.org/assignments/ikev2-parameters/ikev2-parameters.xhtml#ikev2-parameters-12
  // The default value is Shared Key Message Integrity Code.
  optional IkeV2AuthMethod auth_method = 16;

  // To specify the client ID type used in IKE protocol. The current supported
  // ID types are ID_KEY_ID and ID_DER_ASN1_DN. The full probable ID types are
  // listed in
  // https://www.iana.org/assignments/ikev2-parameters/ikev2-parameters.xhtml#ikev2-parameters-10.
  // The default value is ID_KEY_ID.
  optional IkeV2ClientIdType client_id_type = 17;
}

message PpnDataplaneResponse {
  reserved 9;

  // The source ip address of the packets coming from the client.
  // Repeated for v4/v6 versions, or non-contiguous ranges. This is empty in
  // rekey responses.
  repeated IpRange user_private_ip = 1;

  // The dataplane address the client's encapsulated ipsec packets should be
  // sent to. Repeated for v4/v6. This is empty for rekey responses.
  repeated string egress_point_sock_addr = 2;

  // Public value of the egress point.
  bytes egress_point_public_value = 3;

  // 16 random bytes used as half of HKDF salt. Client provides other half.
  bytes server_nonce = 4;

  // The [SPI](https://tools.ietf.org/html/rfc4303#page-10) to be used on uplink
  // data packets.
  uint32 uplink_spi = 5;

  // Absolute UTC time this session and key expires. The client should reauth or
  // rekey before this time. Any packets destined for this session after this
  // time will be dropped.
  google.protobuf.Timestamp expiry = 6;

  // The address the client should use to perform TCP MSS detection.
  repeated string mss_detection_sock_addr = 7;

  // The port that the client should use for IPsec transport mode. This should
  // be used with the IP address from egress_point_sock_addr.
  uint32 transport_mode_server_port = 8;

  // An address to identify where control plane messages for this session should
  // be sent. This must be included with all future requests sent to Beryllium
  // for this session.
  string control_plane_addr = 10;
}

message AuthCertificates {
  // The CA certificate to verify the server certificate, encoded in DER
  // format.
  optional bytes server_ca_certificate = 1;

  // The client certificate issued from the server that will be used in
  // certificate-based IKE_AUTH, encoded in DER format.
  optional bytes client_certificate = 2;
}

// Next ID: 5
message PpnIkeResponse {
  // The ID to be used in IKEv2.
  bytes client_id = 1;

  oneof auth_material {
    // The shared secret to be used in pre-shared-key based auth algorithm.
    bytes shared_secret = 2;

    // The CA certificates respectively verifying the client and the server
    // certificate to be used in the certificate-based auth algorithm.
    AuthCertificates certificates = 4;
  }

  // The server hostname to put in the IKE profile.
  string server_address = 3;
}

message AddEgressRequest {
  reserved 3, 4;

  // The unblinded token to be spent which was blind-signed by Phosphor.
  string unblinded_token = 1;

  PpnDataplaneRequest ppn = 2;

  // The b64 encoded signature for the token to be spent, obtained from Phosphor
  // and unblinded.
  string unblinded_token_signature = 5;

  // The base64 encoding of override_region token and signature:
  // "${Region}.${timestamp}.${signature}" from Zinc. This is used to
  // verify and override region for white listed users.
  string region_token_and_signature = 6;

  // Public metadata associated with the token being spent.
  privacy.ppn.PublicMetadata public_metadata = 7;

  // The version number of the signing key that was used during blind-signing.
  uint64 signing_key_version = 8;

  // The key type (e.g. Zinc, AT Public Metadata, etc.) used to sign the token.
  privacy.ppn.KeyType key_type = 9;

  // Nonce used to mask plaintext message before cryptographic verification.
  bytes message_mask = 10;

  // Public metadata associated with the token being spent. Only set one of this
  // or public_metadata.
  bytes binary_public_metadata = 11;
}

message AddEgressResponse {
  reserved 2;

  oneof dataplane {
    PpnDataplaneResponse ppn_dataplane = 1;
    PpnIkeResponse ike = 3;
  }
}
