/**
 * Copyright (C) 2022 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

edition = "2023";

package privacy.krypton.desktop;

import "google/rpc/status.proto";
import "privacy/net/common/proto/ppn_options.proto";
import "privacy/net/krypton/desktop/proto/ppn_telemetry.proto";
import "privacy/net/krypton/proto/connection_status.proto";
import "privacy/net/krypton/proto/krypton_config.proto";
import "third_party/protobuf/cpp_features.proto";

option features.enum_type = CLOSED;
option features.utf8_validation = NONE;
option cc_api_version = 2;

// This message will be used for IPC between Windows KryptonService and the G1
// app.
message KryptonControlMessage {
  // Required. Defines the action to be performed.
  MessageType type = 1;

  // Defines the request parameters required to process the action.
  KryptonControlRequest request = 2;

  // Defines the response to the processed action.
  KryptonControlResponse response = 3;

  // Type of krypton message to be processed.
  enum MessageType {
    MESSAGE_TYPE_UNSPECIFIED = 0;
    START_KRYPTON = 1;
    STOP_KRYPTON = 2;
    COLLECT_TELEMETRY = 3;
    NOTIFICATION_UPDATE = 4;
    FETCH_OAUTH_TOKEN = 5;
    SET_IP_GEO_LEVEL = 6;
  }
}

// Request proto for KryptonControlMessage containing the respective request
// parameters as per the type of the message.
message KryptonControlRequest {
  oneof request_type {
    // To be set when message type is START_KRYPTON.
    // Only this field will be respected on server end when processing this
    // proto with MessageType set as START_KRYPTON.
    StartKryptonRequest start_krypton_request = 1;

    // To be set when message type is NOTIFICATION_UPDATE.
    // Only this field will be respected on server end when processing this
    // proto with MessageType set as NOTIFICATION_UPDATE.
    NotificationUpdateRequest notification_update_request = 2;

    // To be set when message type is STOP_KRYPTON.
    // Only this field will be respected on server end when processing this
    // proto with MessageType set as STOP_KRYPTON.
    StopKryptonRequest stop_krypton_request = 3;

    // To be set when message type is SET_IP_GEO_LEVEL.
    // Only this field will be respected on server end when processing this
    // proto with MessageType set as SET_IP_GEO_LEVEL.
    SetIpGeoLevelRequest set_ip_geo_level_request = 4;
  }
}

// Response proto for KryptonControlMessage containing the respective response
// parameters as per the type of the message.
message KryptonControlResponse {
  google.rpc.Status status = 1;

  oneof response_type {
    // To be set when message type is COLLECT_TELEMETRY.
    // Only this field will be respected on client end when processing this
    // proto with MessageType set as COLLECT_TELEMETRY.
    CollectTelemetryResponse collect_telemetry_response = 2;

    // To be set when message type is FETCH_OAUTH_TOKEN.
    // Only this field will be respected on client end when processing this
    // proto with MessageType set as FETCH_OAUTH_TOKEN.
    FetchOauthTokenResponse fetch_outh_token_response = 3;
  }
}

// Request to Start Krypton.
message StartKryptonRequest {
  // Config needed to start krypton.
  privacy.krypton.KryptonConfig krypton_config = 1;
}

// Request to Stop Krypton.
message StopKryptonRequest {
  // Field to state reason for Stop - Manual stop or due to permanent error
  google.rpc.Status status = 1;
}

// Response from Collect Telemetry.
message CollectTelemetryResponse {
  // Ppn Telemetry data.
  privacy.krypton.desktop.PpnTelemetry ppn_telemetry = 1;
}

// Request for setting the IP geo level.
message SetIpGeoLevelRequest {
  privacy.ppn.IpGeoLevel level = 1;
}

// PPN Status Notification Update Request
message NotificationUpdateRequest {
  // Type of notification i.e. Status update
  NotificationType notification_type = 1;

  // Metadata attached to some status update
  oneof status {
    // To be set when message type is PPN_DISCONNECTED.
    // Only this field will be respected on client end when processing this
    // proto with MessageType set as PPN_DISCONNECTED.
    PpnDisconnectionStatus ppn_disconnection_status = 2;

    // To be set when message type is PPN_PERMANENT_FAILURE.
    // Only this field will be respected on client end when processing this
    // proto with MessageType set as PPN_PERMANENT_FAILURE.
    PpnPermanentFailureStatus ppn_permanent_failure_status = 3;

    // To be set when message type is PPN_STOPPED.
    // Only this field will be respected on client end when processing this
    // proto with MessageType set as PPN_STOPPED.
    PpnStoppedStatus ppn_stop_status = 4;
  }

  // Notification type i.e. status update enum
  enum NotificationType {
    NOTIFICATION_TYPE_UNSPECIFIED = 0;
    PPN_STARTED = 1;
    PPN_STOPPED = 2;
    PPN_CONNECTED = 3;
    PPN_CONNECTING = 4;
    PPN_DISCONNECTED = 5;
    PPN_WAITING_TO_RECONNECT = 6;
    PPN_PERMANENT_FAILURE = 7;
  }
}

// Response to Fetch outh token request. Sends the oauth_token to be used by the
// service.
message FetchOauthTokenResponse {
  // Oauth Token
  string oauth_token = 1;
}

// Metadata attached with PPN_DISCONNECTED notification.
message PpnDisconnectionStatus {
  DisconnectionStatus status = 1;
}

// Metadata attached with PPN_PERMANENT_FAILURE notification.
message PpnPermanentFailureStatus {
  google.rpc.Status status = 1;
}

// Metadata attached with PPN_STOPPED notification.
message PpnStoppedStatus {
  google.rpc.Status status = 1;
}
