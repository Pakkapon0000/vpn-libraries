/*
 * Copyright (C) 2022 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto2";

package privacy.krypton.desktop;

import "google/protobuf/duration.proto";

option cc_api_version = 2;

// PpnTelemetry is used for collection of metrics for how PPN is running. This
// proto is only used for the PPN Windows client. Native Krypton telemetry is
// defined in: krypton/proto/krypton_telemetry.proto
// Next ID: 24
message PpnTelemetry {
  // Duration for how long some network was available since the last time
  // telemetry was collected.
  optional google.protobuf.Duration network_uptime = 1;

  // Cumulative duration for how long PPN was fully connected since the last
  // time telemetry was collected.
  optional google.protobuf.Duration ppn_connection_uptime = 2;

  // Cumulative duration for how long the VPN was turned on since the last time.
  optional google.protobuf.Duration ppn_service_uptime = 3;

  // Amount of time it took for auth to finish, every time it connected.
  repeated google.protobuf.Duration auth_latency = 4;

  // Amount of time it took for egress to be established, every time it
  // connected.
  repeated google.protobuf.Duration egress_latency = 5;

  // Amount of time it took for oauth token to be generated during auth request,
  // every time it connected.
  repeated google.protobuf.Duration oauth_latency = 6;

  // Amount of time it took for the token to be checked by zinc during auth
  // request, every time it connected.
  repeated google.protobuf.Duration zinc_latency = 7;

  // Number of successful rekeys since the last time telemetry was collected.
  optional uint32 successful_rekeys = 8;

  // Number of network switches since the last time telemetry was collected.
  optional uint32 network_switches = 9;

  // List of all disconnection durations since the last time telemetry was
  // collected.
  repeated google.protobuf.Duration disconnection_durations = 10;

  // Number of disconnections since the last time telemetry was collected.
  optional uint32 disconnection_count = 11;

  // Number of successful network switches since the last telemetery collection
  // event.
  optional uint32 successful_network_switches = 12;

  // Provides latency for each network switch that is successful.
  repeated google.protobuf.Duration network_switch_latency = 13;

  // The number of times a client attempts provisioning.
  optional uint32 control_plane_attempts = 14;

  // The number of times the client is successfully provisioned.
  optional uint32 control_plane_successes = 15;

  // Provides latency from start of provisioning until fully provisioned.
  repeated google.protobuf.Duration control_plane_success_latency = 16;

  // Provides latency from start of provisioning until failure.
  repeated google.protobuf.Duration control_plane_failure_latency = 17;

  // The number of attempts to connect a datapath.
  optional uint32 data_plane_connecting_attempts = 18;

  // The number of times a datapath was successfully connected.
  optional uint32 data_plane_connecting_successes = 19;

  // Provides latency from start of connecting a datapath until fully connected.
  repeated google.protobuf.Duration data_plane_connecting_latency = 20;

  // The number of times a health check is performed.
  optional uint32 health_check_attempts = 21;

  // The number of times a health check confirms connection.
  optional uint32 health_check_successes = 22;

  // The number of times anonymous token unblinding fails, leading to
  // authentication failure.
  optional uint32 token_unblind_failure_count = 23;
}
